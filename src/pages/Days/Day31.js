import PushNotification from "react-native-push-notification";

class NotifService {
    constructor(onRegister, onNotification) {
        this.configure(onRegister, onNotification);

        this.lastId = 0;
    }

    configure(onRegister, onNotification, gcm = "") {
        PushNotification.configure({
            // (optional) Called when Token is generated (iOS and Android)
            onRegister: onRegister, //this._onRegister.bind(this),

            // (required) Called when a remote or local notification is opened or received
            onNotification: onNotification, //this._onNotification,

            // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications)
            senderID: gcm,

            // IOS ONLY (optional): default: all - Permissions to register.
            permissions: {
                alert: true,
                badge: true,
                sound: true
            },

            // Should the initial notification be popped automatically
            // default: true
            popInitialNotification: true,

            /**
             * (optional) default: true
             * - Specified if permissions (ios) and token (android and ios) will requested or not,
             * - if not, you must call PushNotificationsHandler.requestPermissions() later
             */
            requestPermissions: true
        });
    }

    localNotif() {
        this.lastId++;
        PushNotification.localNotification({
            /* Android Only Properties */
            id: "" + this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            ticker: "My Notification Ticker", // (optional)
            autoCancel: true, // (optional) default: true
            largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
            smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
            bigText:
                "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
            subText: "This is a subText", // (optional) default: none
            color: "red", // (optional) default: system default
            vibrate: true, // (optional) default: true
            vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
            tag: "some_tag", // (optional) add tag to message
            group: "group", // (optional) add group to message
            ongoing: false, // (optional) set whether this is an "ongoing" notification

            /* iOS only properties */
            alertAction: "view", // (optional) default: view
            category: null, // (optional) default: null
            userInfo: null, // (optional) default: null (object containing additional notification data)

            /* iOS and Android properties */
            title: "Local Notification", // (optional)
            message: "My Notification Message", // (required)
            playSound: false, // (optional) default: true
            soundName: "default", // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
            number: "10", // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
            actions: '["Yes", "No"]' // (Android only) See the doc for notification actions to know more
        });
    }

    scheduleNotif() {
        this.lastId++;
        PushNotification.localNotificationSchedule({
            date: new Date(Date.now() + 30 * 1000), // in 30 secs

            /* Android Only Properties */
            id: "" + this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            ticker: "My Notification Ticker", // (optional)
            autoCancel: true, // (optional) default: true
            largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
            smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
            bigText:
                "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
            subText: "This is a subText", // (optional) default: none
            color: "blue", // (optional) default: system default
            vibrate: true, // (optional) default: true
            vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
            tag: "some_tag", // (optional) add tag to message
            group: "group", // (optional) add group to message
            ongoing: false, // (optional) set whether this is an "ongoing" notification

            /* iOS only properties */
            alertAction: "view", // (optional) default: view
            category: null, // (optional) default: null
            userInfo: null, // (optional) default: null (object containing additional notification data)

            /* iOS and Android properties */
            title: "Scheduled Notification", // (optional)
            message: "My Notification Message", // (required)
            playSound: true, // (optional) default: true
            soundName: "default" // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
        });
    }

    checkPermission(cbk) {
        return PushNotification.checkPermissions(cbk);
    }

    cancelNotif() {
        PushNotification.cancelLocalNotifications({ id: "" + this.lastId });
    }

    cancelAll() {
        PushNotification.cancelAllLocalNotifications();
    }
}

/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 * @flow
 */

import React, { Component } from "react";
import {
    TextInput,
    StyleSheet,
    Text,
    View,
    TouchableOpacity,
    Alert
} from "react-native";
// import NotifService from './NotifService';
import appConfig from "../../../app.json";

// type Props = {};
export default class App extends Component {
    constructor(props) {
        super(props);
        this.state = {
            senderId: appConfig.senderID
        };

        this.notif = new NotifService(
            this.onRegister.bind(this),
            this.onNotif.bind(this)
        );
    }

    render() {
        return (
            <View style={styles.container}>
                <Text style={styles.title}>
                    Example app react-native-push-notification
                </Text>
                <View style={styles.spacer} />
                <TextInput
                    style={styles.textField}
                    value={this.state.registerToken}
                    placeholder="Register token"
                />
                <View style={styles.spacer} />

                <TouchableOpacity
                    style={styles.button}
                    onPress={() => {
                        this.notif.localNotif();
                    }}
                >
                    <Text>Local Notification (now)</Text>
                </TouchableOpacity>
                <TouchableOpacity
                    style={styles.button}
                    onPress={() => {
                        this.notif.scheduleNotif();
                    }}
                >
                    <Text>Schedule Notification in 30s</Text>
                </TouchableOpacity>
                <TouchableOpacity
                    style={styles.button}
                    onPress={() => {
                        this.notif.cancelNotif();
                    }}
                >
                    <Text>Cancel last notification (if any)</Text>
                </TouchableOpacity>
                <TouchableOpacity
                    style={styles.button}
                    onPress={() => {
                        this.notif.cancelAll();
                    }}
                >
                    <Text>Cancel all notifications</Text>
                </TouchableOpacity>
                <TouchableOpacity
                    style={styles.button}
                    onPress={() => {
                        this.notif.checkPermission(this.handlePerm.bind(this));
                    }}
                >
                    <Text>Check Permission</Text>
                </TouchableOpacity>

                <View style={styles.spacer} />
                <TextInput
                    style={styles.textField}
                    value={this.state.senderId}
                    onChangeText={e => {
                        this.setState({ senderId: e });
                    }}
                    placeholder="GCM ID"
                />
                <TouchableOpacity
                    style={styles.button}
                    onPress={() => {
                        this.notif.configure(
                            this.onRegister.bind(this),
                            this.onNotif.bind(this),
                            this.state.senderId
                        );
                    }}
                >
                    <Text>Configure Sender ID</Text>
                </TouchableOpacity>
                {this.state.gcmRegistered && <Text>GCM Configured !</Text>}

                <View style={styles.spacer} />
            </View>
        );
    }

    onRegister(token) {
        Alert.alert("Registered !", JSON.stringify(token));
        console.log(token);
        this.setState({ registerToken: token.token, gcmRegistered: true });
    }

    onNotif(notif) {
        console.log(notif);
        Alert.alert(notif.title, notif.message);
    }

    handlePerm(perms) {
        Alert.alert("Permissions", JSON.stringify(perms));
    }
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
        backgroundColor: "#F5FCFF"
    },
    welcome: {
        fontSize: 20,
        textAlign: "center",
        margin: 10
    },
    button: {
        borderWidth: 1,
        borderColor: "#000000",
        margin: 5,
        padding: 5,
        width: "70%",
        backgroundColor: "#DDDDDD",
        borderRadius: 5
    },
    textField: {
        borderWidth: 1,
        borderColor: "#AAAAAA",
        margin: 5,
        padding: 5,
        width: "70%"
    },
    spacer: {
        height: 10
    },
    title: {
        fontWeight: "bold",
        fontSize: 20,
        textAlign: "center"
    }
});
